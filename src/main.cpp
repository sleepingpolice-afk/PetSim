#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET 4

// 'icons8-angry-dog-50', 50x50px
const unsigned char epd_bitmap_icons8_angry_dog_50 [] PROGMEM = {
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xf6, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe6, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x67, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x60, 0x7f, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xe0, 
	0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x70, 0x00, 0x00, 
	0x00, 0xe0, 0x00, 0x10, 0x38, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x3e, 0x1e, 0x00, 0x00, 0x01, 0x80, 
	0x00, 0x3f, 0x0f, 0xfc, 0x00, 0x01, 0x80, 0x00, 0x1f, 0x03, 0xff, 0x80, 0x03, 0x00, 0x00, 0x0c, 
	0x00, 0x0f, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x06, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x0c, 0x00, 0x00, 
	0x01, 0xff, 0xfe, 0x00, 0x0c, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x0c, 0x00, 0x00, 0x07, 0x39, 
	0x98, 0x00, 0x1c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 
	0x38, 0x00, 0x00, 0x0c, 0xee, 0x60, 0x00, 0x30, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x30, 0x00, 
	0x00, 0x0f, 0xff, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x70, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xc0, 
	0x00, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 368)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_icons8_angry_dog_50
};

// 'icons8-dog-50', 50x50px
const unsigned char doggieicons8_dog_50 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1f, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x03, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x03, 0x81, 0xc0, 0x00, 0x00, 0x00, 
	0x03, 0x03, 0x81, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x80, 0x78, 0x00, 0x00, 0x03, 0x00, 
	0x03, 0x80, 0xfc, 0x00, 0x00, 0x06, 0x00, 0x03, 0x00, 0xce, 0x00, 0x00, 0x06, 0x00, 0x03, 0x00, 
	0xc7, 0x00, 0x00, 0x06, 0x01, 0xfe, 0x00, 0xe3, 0xff, 0xff, 0xfe, 0x01, 0xfe, 0x00, 0x71, 0xff, 
	0xff, 0xff, 0x81, 0x80, 0x00, 0x38, 0x00, 0x00, 0x01, 0xe1, 0x80, 0x00, 0x1c, 0x00, 0x00, 0x00, 
	0x79, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x07, 0x80, 
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0c, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0c, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x3f, 0xff, 0xff, 0x86, 0x00, 0x00, 
	0x0c, 0x3f, 0xff, 0xff, 0x86, 0x00, 0x00, 0x0c, 0x30, 0xc0, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x30, 
	0x60, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x38, 0x70, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x38, 0x30, 0x01, 
	0x86, 0x00, 0x00, 0x0c, 0x3c, 0x38, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x3c, 0x18, 0x01, 0x86, 0x00, 
	0x00, 0x0c, 0x36, 0x0c, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x37, 0x0e, 0x01, 0x86, 0x00, 0x00, 0x0c, 
	0x33, 0x06, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x33, 0x87, 0x01, 0x86, 0x00, 0x00, 0x0c, 0x31, 0x83, 
	0x01, 0x86, 0x00, 0x00, 0x0c, 0x30, 0xc3, 0x01, 0x86, 0x00, 0x00, 0x0e, 0x70, 0xe7, 0x01, 0xce, 
	0x00, 0x00, 0x07, 0xe0, 0x7e, 0x00, 0xfc, 0x00, 0x00, 0x03, 0xc0, 0x3c, 0x00, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 368)
const int doggieallArray_LEN = 1;
const unsigned char* doggieallArray[1] = {
	doggieicons8_dog_50
};





#define RED 0xFF0000

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
//Adafruit_SSD1306 display(OLED_RESET);


//Variables go here
unsigned long startTime;

unsigned long hunger;
unsigned long deathtimer;
unsigned long holdTime;
unsigned long medicinebtnhold;
unsigned long previoushunger = 0;
unsigned long spamtime;
unsigned long prevspamtime;

int hungerbtn = 13;
int hungerstate = 0;
int previousHungerState = HIGH;
int coinbtn = 12;
int coinstate = 0;
int coinprevstate = HIGH;
int medicinebtn = 11;
int medicinestate = 0;
int prevmedicinestate = HIGH;

int healthbar;
int hungerbar;

int spamclick = 0;


int coins = 5;
//Variables end here

//functions go here
void angrydog() {
  //display.clearDisplay();
  display.drawBitmap(0, 20, epd_bitmap_icons8_angry_dog_50, 50, 50, 1);
  display.display();
}

void idledog()
{
  display.clearDisplay();
  display.drawBitmap(39, 0, doggieicons8_dog_50, 50, 50, 1);
  display.display();
}

void gameover(int cause)
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Your pet has died.");
  display.display();
  display.print("Cause: ");
  display.display();

  switch (cause)
  {
    case 1: 
      display.println("Starvation");
      display.display();
      break;

    case 2:
      display.println("Sickness");
      display.display();
      break;

    case 3:
      display.println("Overweight");
      display.display();
      break;
  }

  while(1)
  {
    delay(2000);
  }
}

void getfood() 
{
  hungerbar = hungerbar + 3;
  if (hungerbar > 10) {
    hungerbar = 10;
  }

  int number = random(0, 10); 
  if (number > 7) {
    Serial.print(number);
  }
}

void pethungry()
{
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.println("Your pet is hungry");
  display.display();

  delay(1000);

  //display.println("Your pet is hungry");
  //display.display();

  //delay(1000);

  display.println("Feed him.");
  display.display();
  
  delay(500);
  
  display.println("Press Blue btn to feed");
  display.display();

  delay(1000);
  display.clearDisplay();

  deathtimer = millis();

  while(millis() - deathtimer < 15000)
  {
    hungerstate = digitalRead(hungerbtn);
    if(hungerstate == HIGH && millis() - deathtimer == 5000)
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("Your pet is dying...");
      display.display();
      delay(1000);
      display.println("Feed him?");
      display.display();
      delay(500);
    }
    else if(hungerstate == LOW)
    {
      getfood();
    
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("Your pet is happy.");
      display.display();
      delay(2000);
      display.clearDisplay();
      return;
    }
  }

  int cause = 1; //starvation death
  gameover(cause);
}

void currentstatus()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("Coins: ");
  display.print(coins);
  display.display();

  display.setCursor(0, 32);
  display.print("HGR: ");
  display.display();
  for(int i=0; i<hungerbar; i++)
  {
    display.print("|");
    display.display();
  }

  display.print("\nHLT: ");
  for(int i=0; i<healthbar; i++)
  {
    display.print("|");
    display.display();
  }

  unsigned long waitTime;

  medicinestate = digitalRead(medicinebtn);

  waitTime = millis();

  while(millis() - waitTime < 3000)
  {
    if(digitalRead(medicinebtn) == LOW)
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      if(coins < 4)
      { 
        display.println("Need 4 coins.");
        display.display();
      }
      else
      {
        coins = coins - 4;
        display.println("Bought a medicine for 4 coins");
        display.display();
      }
      delay(2000);
      break;
    }
  }


  if(millis() - startTime >= 3000)
  {
    delay(2000);
    display.clearDisplay();
    return;
  }
}

void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
Serial.print("Successfully Started\n");

pinMode(hungerbtn, INPUT_PULLUP);
pinMode(coinbtn, INPUT_PULLUP);
pinMode(medicinebtn, INPUT_PULLUP);

display.begin(SSD1306_SWITCHCAPVCC, 0x3c);

display.clearDisplay();

display.setTextSize(1);
display.setTextColor(WHITE);
display.setCursor(0, 0);
display.println("This is your pet.");
display.display();

delay(2000);

display.clearDisplay();
display.setCursor(0, 0);
display.print("His name is Gio");
display.display();

delay(500);
angrydog();

delay(2000);

display.clearDisplay();
display.setCursor(0, 0);
display.println("Pet him.");
display.display();

delay(1000);

display.setCursor(3/4*SCREEN_WIDTH, 32);
display.setTextSize(2);
display.println("or else...");
display.display();
display.clearDisplay();

delay(3000);
display.clearDisplay();

//debugg
healthbar = 2;
hungerbar = 2;
}

void loop() {
  //hungerstate = digitalRead(hungerbtn);
  hunger = millis();

  if (hunger - previoushunger >= 10000) 
  {
    previoushunger = hunger;
    hungerbar--;
  }

  if(hungerbar <= 0)
  {
    display.clearDisplay();
    pethungry();
  }

  if(digitalRead(hungerbtn) == LOW)
  {
    spamclick++;
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Fed.");
    display.display();
    getfood();
    delay(1000);
    display.clearDisplay();
  }

  if(spamclick > 1)
  {
    gameover(3);
  }

 if (digitalRead(hungerbtn) == LOW && previousHungerState == HIGH) {
    //Serial.println("Hunger button pressed.");
    spamtime = millis(); // Reset hunger timer when button is pressed
  }

  prevspamtime = spamtime;

  coinstate = digitalRead(coinbtn);

  if(coinstate == LOW && coinprevstate == HIGH)
  {
    coins = coins + 1;
    holdTime = millis();
    delay(100);
  }
  else if((millis() - holdTime >= 2000) && coinstate == LOW)
  {
    coins--;
    currentstatus();

      while(digitalRead(coinbtn) == LOW)
      {
        delay(10);
      }
    }

  coinprevstate = coinstate;

  idledog();

  // Check if 1 seconds have passed since last button press
  if (millis() - spamtime >= 500) {
    if(spamclick > 0)
    {
      spamclick--;
    }
    spamtime = millis();
  }


  delay(100); // Small delay to prevent excessive CPU usage
}

